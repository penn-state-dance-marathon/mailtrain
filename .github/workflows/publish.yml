name: Publish and Deploy

on:
  push:
    branches:
      - thon-prod

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
        aws-region: us-east-2
    - name: Login to Amazon ECR (mailtrain)
      id: login-ecr-mailtrain
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR (mailtrain)
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-mailtrain.outputs.registry }}
        ECR_REPOSITORY: mailtrain
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Logout of Amazon ECR (mailtrain)
      if: always()
      run: docker logout ${{ steps.login-ecr-mailtrain.outputs.registry }}
    - name: Login to Amazon ECR (nginx)
      id: login-ecr-nginx
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR (nginx)
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-nginx.outputs.registry }}
        ECR_REPOSITORY: mailtrain-nginx
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./nginx
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Logout of Amazon ECR (nginx)
      if: always()
      run: docker logout ${{ steps.login-ecr-nginx.outputs.registry }}
  deploy:
      runs-on: ubuntu-latest
      needs: publish
      steps:
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
            aws-region: us-east-2

        - name: Set up Python/AWS CLI
          uses: actions/setup-python@v1
          with:
            python-version: '3.x'

        - name: Initiate deployment
          run: |
            python -m pip install --upgrade pip
            pip install awscli
            aws ecs update-service --cluster mail-prod --service mail-prod --force-new-deployment
